/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
"use client"
import React, { useRef, useEffect, useCallback } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";

const Planets = ({isRotating, setIsRotating, setCurrentStage, ...props}) => {
  const frameRef = useRef();
  const planetsRef = useRef();
  const { gl, viewport} = useThree();
  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;
  const lastPointerMoveTime = useRef();

  const { nodes, materials } = useGLTF('/planets2.glb');
  
  const handlePointerDown = (e) => {
    console.log("POINTER DOWN");
    lastPointerMoveTime.current = Date.now();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  }  
  const handlePointerUp = (e) => {
    console.log("POINTER UP");
    
    setIsRotating(false);
    
    if (frameRef.current) {
      cancelAnimationFrame(frameRef.current);
      frameRef.current = null;
    }
    
  }  

  const handlePointerCancel = (e) => {
    const timeSinceLastMove = Date.now() - lastPointerMoveTime.current;

    if (timeSinceLastMove > 100) {
      console.log("cancelling pointer - time since last logged touch: " + timeSinceLastMove + " ms");
      setIsRotating(false)
      if (frameRef.current) {
        cancelAnimationFrame(frameRef.current);
      }
    } else {
      console.log("pointercancel event ignored: movement detected");
    }
  }
  
  const handlePointerMove = useCallback((e) => {
    console.log('Pointer move fired - type:', e.pointerType);
      if (!isRotating) return;
      if (e.pointerType === 'touch') {
      e.preventDefault();
    
    
      const clientX = e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;
    
      if (planetsRef.current) {
        planetsRef.current.rotation.y += delta * 0.01 * Math.PI;
      }
    
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    
    } else {
      if (!isRotating) {
        console.log('Not rotating, returning');
        return;
      }
      
    if (frameRef.current) {
        cancelAnimationFrame(frameRef.current);
    }

    frameRef.current = requestAnimationFrame(() => {
        const clientX = e.clientX;
        const delta = (clientX - lastX.current) / viewport.width;
        
        planetsRef.current.rotation.y += delta * 0.01 * Math.PI;
        lastX.current = clientX;
        rotationSpeed.current = delta * 0.01 * Math.PI;
    });
    }
  }, [isRotating, viewport.width]);
    

  const handleKeyDown = (e) => {
    if (e.key === 'ArrowLeft') {
        if(!isRotating) setIsRotating(true);
        planetsRef.current.rotation.y += 0.01 * Math.PI;
        rotationSpeed.current = 0.0125;
    } else if (e.key === 'ArrowRight') {
        if(!isRotating) setIsRotating(true);
        planetsRef.current.rotation.y -= 0.01 * Math.PI;
        rotationSpeed.current = -0.0125;
    }
  }

  const handleKeyUp = (e) => {
    if(e.key === 'ArrowLeft' || e.key === "ArrowRight") {
        setIsRotating(false);
    }
  }

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointercancel', handlePointerCancel);
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);

    return () => {
        canvas.removeEventListener('pointerup', handlePointerUp)
        canvas.removeEventListener('pointercancel', handlePointerCancel);
        canvas.removeEventListener('pointerdown', handlePointerDown)
        canvas.removeEventListener('pointermove', handlePointerMove)
        document.removeEventListener('keydown', handleKeyDown);
        document.removeEventListener('keyup', handleKeyUp);
    }

  }, [handlePointerDown, handlePointerUp, handlePointerMove, handleKeyDown, handleKeyUp, gl])

  useFrame(() => {
    if(!isRotating) {
        rotationSpeed.current *= dampingFactor;

        if (Math.abs(rotationSpeed.current) < 0.01) {
            rotationSpeed.current = 0;
        }

        planetsRef.current.rotation.y += rotationSpeed.current
    } 
        const rotation = planetsRef.current.rotation.y;
    

    /* 
    *  Normalize the rotation value to ensure it stays within range (0 - 2*PI)
    *    Prevents potential issues with very large rotational values
    *    Step by step explanation:
    *       1. rotation % (2 * Math.PI) calculates the remainder of the rotation over the full circumference
    *            essentially wraps the rotation value back to 0 on full spin;
    *       2. (rotation % (2 * Math.PI) + (2 * Math.PI)) adds a full rotation to the step above
    *            ensures rotation value is always positive, even if the modulo in step 1 is negative
    *       3. ((rotation % (2 * Math.PI)) + (2 * Math.PI)) % ( 2 * Math.PI ) applies another modulo operation
    *            guarantees the value always stays within range after the full rotation is added.
    */
   const normalizedRotation = ((rotation % (2 * Math.PI)) + (2 * Math.PI)) % (2 * Math.PI);
   // adjust model position based on rotation for zoom effect
   let targetZ = 0;
   let currentMax = 40;

   const smoothInterpolate = (start, end, value, targetValue, max) => {
    if (value <= start) return max;
    if (value >= end) return targetValue;

    const progress = (value - start) / (end - start);
    const smoothProgress = (1 - Math.cos(progress * Math.PI)) / 2;
    return max - ((max - targetValue) * smoothProgress);
   }

   if (normalizedRotation >= 2.35 && normalizedRotation <= 2.65) {
    targetZ = 0;
    currentMax = 0;
   } else if (normalizedRotation >= 0.4 && normalizedRotation <= 0.75) {
    targetZ = 20;
    currentMax = 20;
   } else if (normalizedRotation >= 4.5 && normalizedRotation <= 4.9) {
    targetZ = 40;
    currentMax = 40;
   } else if (normalizedRotation > 0.75 && normalizedRotation < 2.35) {
    targetZ = smoothInterpolate(0.75, 2.35, normalizedRotation, 0, 20);
   } else if (normalizedRotation > 2.65 && normalizedRotation < 4.5) {
    targetZ = smoothInterpolate(2.65, 4.5, normalizedRotation, 40, 0);
   } else if (normalizedRotation > 4.9 || normalizedRotation < 0.4) {
    if (normalizedRotation > 4.9) {
        const adjustedRotation = normalizedRotation - 2 * Math.PI;
        targetZ = smoothInterpolate(4.9, 2 * Math.PI, normalizedRotation, 23, 40);
    } else {
        targetZ = smoothInterpolate(0, 0.4, normalizedRotation, 20, 23);
    }
   }
   
   planetsRef.current.position.z = targetZ - 193;
   //set the current stage based upon the rotation
   switch (true) {
    case normalizedRotation >= 4.7 && normalizedRotation <= 5.1:
        setCurrentStage(1);
        break;
    case normalizedRotation >= 0.4 && normalizedRotation <= 0.75:
        setCurrentStage(3);
        break;
    case normalizedRotation >= 2.35 && normalizedRotation <= 2.65:
        setCurrentStage(2);
        break;
    case normalizedRotation >= 5.2 && normalizedRotation <=6.2:
        setCurrentStage(0);
        break;    
    default:
        setCurrentStage(null);                
   }

  })

  return (
    <a.group
      {...props}
      ref={planetsRef}
    >
      <group
        position={[-0.011, 0, 0.01]}
        rotation={[1.371, -0.162, -1.958]}
        scale={0.821}
      >
        <mesh
          geometry={nodes.object1_1.geometry}
          material={
            materials[
              "create_block-palettes-stone_types-polished-scorchia_cut_polishe"
            ]
          }
        />
        <mesh
          geometry={nodes.object1_2.geometry}
          material={materials["minecraft_block-stone"]}
        />
        <mesh
          geometry={nodes.object1_3.geometry}
          material={materials["create_block-dark_metal_block"]}
        />
        <mesh
          geometry={nodes.object1_4.geometry}
          material={materials["minecraft_block-dirt"]}
        />
        <mesh
          geometry={nodes.object1_5.geometry}
          material={materials["minecraft_block-sandstone"]}
        />
        <mesh
          geometry={nodes.object1_6.geometry}
          material={materials["minecraft_block-andesite"]}
        />
        <mesh
          geometry={nodes.object1_7.geometry}
          material={materials["minecraft_block-sea_lantern"]}
        />
        <mesh
          geometry={nodes.object1_8.geometry}
          material={materials["create_block-flap_display_side"]}
        />
        <mesh
          geometry={nodes.object1_9.geometry}
          material={materials["minecraft_block-red_sandstone_top"]}
        />
        <mesh
          geometry={nodes.object1_10.geometry}
          material={materials["minecraft_block-blue_stained_glass"]}
        />
        <mesh
          geometry={nodes.object1_11.geometry}
          material={materials["minecraft_block-magma"]}
        />
        <mesh
          geometry={nodes.object1_12.geometry}
          material={materials["minecraft_block-grass_block_side"]}
        />
        <mesh
          geometry={nodes.object1_13.geometry}
          material={materials["minecraft_block-red_sandstone_bottom"]}
        />
        <mesh
          geometry={nodes.object1_14.geometry}
          material={materials["create_block-flap_display_inside"]}
        />
        <mesh
          geometry={nodes.object1_15.geometry}
          material={materials["minecraft_block-grass_block_top"]}
        />
        <mesh
          geometry={nodes.object1_16.geometry}
          material={materials["minecraft_block-orange_wool"]}
        />
        <mesh
          geometry={nodes.object1_17.geometry}
          material={materials["minecraft_block-black_stained_glass"]}
        />
        <mesh
          geometry={nodes.object1_18.geometry}
          material={materials["create_block-flap_display_top"]}
        />
        <mesh
          geometry={nodes.object1_19.geometry}
          material={materials["minecraft_block-sandstone_top"]}
        />
        <mesh
          geometry={nodes.object1_20.geometry}
          material={materials["minecraft_block-obsidian"]}
        />
        <mesh
          geometry={nodes.object1_21.geometry}
          material={materials["minecraft_block-glowstone"]}
        />
        <mesh
          geometry={nodes.object1_22.geometry}
          material={materials["minecraft_block-calcite"]}
        />
        <mesh
          geometry={nodes.object1_23.geometry}
          material={materials["minecraft_block-cyan_stained_glass"]}
        />
        <mesh
          geometry={nodes.object1_24.geometry}
          material={materials["create_block-flap_display_front"]}
        />
        <mesh
          geometry={nodes.object1_25.geometry}
          material={materials["minecraft_block-red_sandstone"]}
        />
        <mesh
          geometry={nodes.object1_26.geometry}
          material={materials["minecraft_block-sandstone_bottom"]}
        />
        <mesh
          geometry={nodes.object1_27.geometry}
          material={
            materials[
              "create_block-palettes-stone_types-brick-dripstone_cut_brick"
            ]
          }
        />
        <mesh
          geometry={nodes.object1_28.geometry}
          material={materials["supplementaries_block-ash_bricks"]}
        />
        <mesh
          geometry={nodes.object1_29.geometry}
          material={
            materials["create_block-palettes-stone_types-cut-limestone_cut"]
          }
        />
        <mesh
          geometry={nodes.object1_30.geometry}
          material={materials["create_block-palettes-weathered_iron_window"]}
        />
        <mesh
          geometry={nodes.object1_31.geometry}
          material={materials["minecraft_block-torchflower"]}
        />
        <mesh
          geometry={nodes.object1_32.geometry}
          material={materials["minecraft_block-flowering_azalea_leaves"]}
        />
        <mesh
          geometry={nodes.object1_33.geometry}
          material={materials["minecraft_block-tall_grass_top"]}
        />
        <mesh
          geometry={nodes.object1_34.geometry}
          material={materials["supplementaries_block-daub"]}
        />
        <mesh
          geometry={nodes.object1_35.geometry}
          material={materials["minecraft_block-oak_planks"]}
        />
        <mesh
          geometry={nodes.object1_36.geometry}
          material={materials["minecraft_block-green_wool"]}
        />
        <mesh
          geometry={nodes.object1_37.geometry}
          material={materials["minecraft_block-moss_block"]}
        />
        <mesh
          geometry={nodes.object1_38.geometry}
          material={materials["minecraft_block-azalea_plant"]}
        />
        <mesh
          geometry={nodes.object1_39.geometry}
          material={materials["minecraft_block-azalea_leaves"]}
        />
        <mesh
          geometry={nodes.object1_40.geometry}
          material={materials["minecraft_block-mud_bricks"]}
        />
        <mesh
          geometry={nodes.object1_41.geometry}
          material={materials["minecraft_block-campfire_log"]}
        />
        <mesh
          geometry={nodes.object1_42.geometry}
          material={materials["minecraft_block-oak_log"]}
        />
        <mesh
          geometry={nodes.object1_43.geometry}
          material={materials["minecraft_block-lantern"]}
        />
        <mesh
          geometry={nodes.object1_44.geometry}
          material={materials["minecraft_block-green_concrete"]}
        />
        <mesh
          geometry={nodes.object1_45.geometry}
          material={materials["minecraft_block-muddy_mangrove_roots_top"]}
        />
        <mesh
          geometry={nodes.object1_46.geometry}
          material={materials["minecraft_block-azalea_top"]}
        />
        <mesh
          geometry={nodes.object1_47.geometry}
          material={materials["minecraft_block-flowering_azalea_top"]}
        />
        <mesh
          geometry={nodes.object1_48.geometry}
          material={materials["minecraft_block-nether_wart_block"]}
        />
        <mesh
          geometry={nodes.object1_49.geometry}
          material={materials["minecraft_block-campfire_log_lit"]}
        />
        <mesh
          geometry={nodes.object1_50.geometry}
          material={materials["minecraft_block-acacia_planks"]}
        />
        <mesh
          geometry={nodes.object1_51.geometry}
          material={materials["minecraft_block-lily_of_the_valley"]}
        />
        <mesh
          geometry={nodes.object1_52.geometry}
          material={materials["minecraft_block-flowering_azalea_side"]}
        />
        <mesh
          geometry={nodes.object1_53.geometry}
          material={materials["minecraft_block-mangrove_planks"]}
        />
        <mesh
          geometry={nodes.object1_54.geometry}
          material={materials["minecraft_block-mangrove_trapdoor"]}
        />
        <mesh
          geometry={nodes.object1_55.geometry}
          material={materials["minecraft_block-tall_grass_bottom"]}
        />
        <mesh
          geometry={nodes.object1_56.geometry}
          material={materials["minecraft_block-crimson_stem"]}
        />
        <mesh
          geometry={nodes.object1_57.geometry}
          material={materials["minecraft_block-mushroom_stem"]}
        />
        <mesh
          geometry={nodes.object1_58.geometry}
          material={materials["minecraft_block-oak_log_top"]}
        />
        <mesh
          geometry={nodes.object1_59.geometry}
          material={materials["minecraft_block-clay"]}
        />
        <mesh
          geometry={nodes.object1_60.geometry}
          material={materials["minecraft_block-muddy_mangrove_roots_side"]}
        />
        <mesh
          geometry={nodes.object1_61.geometry}
          material={materials["minecraft_block-stripped_mangrove_log"]}
        />
        <mesh
          geometry={nodes.object1_62.geometry}
          material={materials["minecraft_block-red_nether_bricks"]}
        />
        <mesh
          geometry={nodes.object1_63.geometry}
          material={materials["minecraft_block-rooted_dirt"]}
        />
        <mesh
          geometry={nodes.object1_64.geometry}
          material={materials["minecraft_block-brown_mushroom_block"]}
        />
        <mesh
          geometry={nodes.object1_65.geometry}
          material={materials["minecraft_block-blue_wool"]}
        />
        <mesh
          geometry={nodes.object1_66.geometry}
          material={materials["minecraft_block-azalea_side"]}
        />
        <mesh
          geometry={nodes.object1_67.geometry}
          material={materials["minecraft_block-campfire_fire"]}
        />
      </group>
    </a.group>
  );
};

useGLTF.preload("/planets2.glb");

export default Planets;
